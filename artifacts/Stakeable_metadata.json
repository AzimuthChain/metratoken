{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "Staked",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_staker",
						"type": "address"
					}
				],
				"name": "hasStake",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "total_amount",
								"type": "uint256"
							},
							{
								"components": [
									{
										"internalType": "address",
										"name": "user",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "since",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "claimable",
										"type": "uint256"
									}
								],
								"internalType": "struct Stakeable.Stake[]",
								"name": "stakes",
								"type": "tuple[]"
							}
						],
						"internalType": "struct Stakeable.StakingSummary",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"events": {
				"Staked(address,uint256,uint256,uint256)": {
					"notice": "Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
				}
			},
			"kind": "user",
			"methods": {
				"constructor": {
					"notice": "Constructor since this contract is not ment to be used without inheritance push once to stakeholders for it to work proplerly"
				},
				"hasStake(address)": {
					"notice": "hasStake is used to check if a account has stakes and the total amount along with all the seperate stakes"
				}
			},
			"notice": "Stakeable is a contract who is ment to be inherited by other contract that wants Staking capabilities",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Stakeable.sol": "Stakeable"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/Stakeable.sol": {
			"keccak256": "0x517707a10dac8dc1fe0670a17a31ac037455b13e41db57ebac282fefb2c8687e",
			"license": "MIT",
			"urls": [
				"bzz-raw://248365511509deab02de1c3ae4239da30813f6c004df652ea7d2f9e182a410c5",
				"dweb:/ipfs/QmThxzL42kdJ6cAgr9VNMoMRkZvrs5KuTaxva9U9ac9smA"
			]
		}
	},
	"version": 1
}