{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "Staked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "burn",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "decreaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_staker",
						"type": "address"
					}
				],
				"name": "hasStake",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "total_amount",
								"type": "uint256"
							},
							{
								"components": [
									{
										"internalType": "address",
										"name": "user",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "since",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "claimable",
										"type": "uint256"
									}
								],
								"internalType": "struct Stakeable.Stake[]",
								"name": "stakes",
								"type": "tuple[]"
							}
						],
						"internalType": "struct Stakeable.StakingSummary",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "increaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "mint",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "stake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "stake_index",
						"type": "uint256"
					}
				],
				"name": "withdrawStake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"events": {
				"Approval(address,address,uint256)": {
					"notice": "Approval is emitted when a new Spender is approved to spend Tokens on the Owners account"
				},
				"OwnershipTransferred(address,address)": {
					"notice": "Event OwnershipTransferred is used to log that a ownership change of the token has occured"
				},
				"Staked(address,uint256,uint256,uint256)": {
					"notice": "Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
				},
				"Transfer(address,address,uint256)": {
					"notice": "Events are created below. Transfer event is a event that notify the blockchain that a transfer of assets has taken place"
				}
			},
			"kind": "user",
			"methods": {
				"allowance(address,address)": {
					"notice": "allowance is used view how much allowance an spender has"
				},
				"approve(address,uint256)": {
					"notice": "approve will use the senders address and allow the spender to use X amount of tokens on his behalf"
				},
				"balanceOf(address)": {
					"notice": "balanceOf will return the account balance for the given account"
				},
				"burn(address,uint256)": {
					"notice": "burn is used to destroy tokens on an address  See {_burn} Requires   - msg.sender must be the token owner"
				},
				"constructor": {
					"notice": "constructor will be triggered when we create the Smart contract _name = name of the token _short_symbol = Short Symbol name for the token token_decimals = The decimal precision of the Token, defaults 18 _totalSupply is how much Tokens there are totally "
				},
				"decimals()": {
					"notice": "decimals will return the number of decimal precision the Token is deployed with"
				},
				"decreaseAllowance(address,uint256)": {
					"notice": "decreaseAllowance Decrease the allowance on the account inputted from the caller address"
				},
				"getOwner()": {
					"notice": "getOwner just calls Ownables owner function.  returns owner of the token "
				},
				"hasStake(address)": {
					"notice": "hasStake is used to check if a account has stakes and the total amount along with all the seperate stakes"
				},
				"increaseAllowance(address,uint256)": {
					"notice": "increaseAllowance Adds allowance to a account from the function caller address"
				},
				"mint(address,uint256)": {
					"notice": "mint is used to create tokens and assign them to msg.sender  See {_mint} Requires   - msg.sender must be the token owner"
				},
				"name()": {
					"notice": "name will return the Token's symbol "
				},
				"owner()": {
					"notice": "owner() returns the currently assigned owner of the Token "
				},
				"renounceOwnership()": {
					"notice": "renounceOwnership will set the owner to zero address This will make the contract owner less, It will make ALL functions with onlyOwner no longer callable. There is no way of restoring the owner"
				},
				"stake(uint256)": {
					"notice": "Add functionality like burn to the _stake afunction"
				},
				"symbol()": {
					"notice": "symbol will return the Token's symbol "
				},
				"totalSupply()": {
					"notice": "totalSupply will return the tokens total supply of tokens"
				},
				"transfer(address,uint256)": {
					"notice": "transfer is used to transfer funds from the sender to the recipient This function is only callable from outside the contract. For internal usage see  _transfer Requires - Caller cannot be zero - Caller must have a balance = or bigger than amount"
				},
				"transferFrom(address,address,uint256)": {
					"notice": "transferFrom is uesd to transfer Tokens from a Accounts allowance Spender address should be the token holder Requires   - The caller must have a allowance = or bigger than the amount spending"
				},
				"transferOwnership(address)": {
					"notice": "transferOwnership will assign the {newOwner} as owner"
				},
				"withdrawStake(uint256,uint256)": {
					"notice": "withdrawStake is used to withdraw stakes from the account holder"
				}
			},
			"notice": "Metra",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/MetraToken.sol": "Metra"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/MetraToken.sol": {
			"keccak256": "0x3a020c1170288ce7cbbf489e023573c544f8852380b306e8c8ee29e10e0c3f20",
			"license": "MIT",
			"urls": [
				"bzz-raw://0371a3db8b4ac38e7911b28c3b17e9b123524610ed3e95e04af24cc6014c9fdc",
				"dweb:/ipfs/QmVZVcajpRkLMigrHH78tEz8Sw1tnZptDobsujjpyHc7VZ"
			]
		},
		"contracts/Ownable.sol": {
			"keccak256": "0x91984080062f5dab0dc2da72d026f42d41ff1d14a4d4b4015aeebc3be21aca6e",
			"license": "MIT",
			"urls": [
				"bzz-raw://a84d37485126f661e96a6ca0af0a9e50d4e64c88343ad3fee6c536ac4e1000a0",
				"dweb:/ipfs/QmSGDyVPZkDzsWLSAgFZaHDFH5oQHaLc4uzG7jopSMVLzu"
			]
		},
		"contracts/Stakeable.sol": {
			"keccak256": "0x517707a10dac8dc1fe0670a17a31ac037455b13e41db57ebac282fefb2c8687e",
			"license": "MIT",
			"urls": [
				"bzz-raw://248365511509deab02de1c3ae4239da30813f6c004df652ea7d2f9e182a410c5",
				"dweb:/ipfs/QmThxzL42kdJ6cAgr9VNMoMRkZvrs5KuTaxva9U9ac9smA"
			]
		}
	},
	"version": 1
}